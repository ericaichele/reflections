// What happens when you initialize a repository? Why do you need to do it?
It sets up the repository so you can start using Git.
If you don't do it, it won't track your changes. It's
kind of a huge step and necessary.

// How is the staging area different from the workng directory and the repository? What value do you think each offers?
This mirrors the development process. The working
directory is where you get the initial files set up
to be processed. The staging area is where you start
working on the items and then you move them onto the
repository so that others can see the work you've
done. It's necessary to have a hierarchy in order
for everything to be organized.

// How can you use the staging area to make sure you have one commit per logical change?
It's pretty much that you only add the files that are
associated with the one particular change that you
are trying to commit. If you worked on 4 files and 
only 2 of them are for a particular feature, only
add those two files to the staging area for that
commit.

// What are some situations when branches would be helpful in keeping your history organized? How would branches help?
This could be anything from new features to different UI
changes. Honestly, I'm going to have to use it more in
order to really find out how it needs to be utilized. 

// How do the diagrams help you visualize the branch structure?
As a very visual person, drawing out the diagrams is very
helpful. A lot of people use the GUI Git clients because of
this very reason. The text in the terminal is good, but a
graphical representation is a lot easier for average joe.

// What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The branches merged added color and a new functionality 
to the game. The diagram helps for those of us who like
visual representations for things.